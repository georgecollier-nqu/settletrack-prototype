// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum Role {
  SUPERVISOR    // Full admin access (Jackie)
  REVIEWER      // Limited to QC tools only
  USER          // Regular user
}

// QC workflow status
enum QCStatus {
  PENDING
  IN_REVIEW
  CHANGES_REQUESTED
  REVIEWER_APPROVED
  SUPERVISOR_APPROVED
  REJECTED
  COMPLETED
}

// User model
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String   // Hashed password
  name              String
  role              Role     @default(USER)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  organization      Organization? @relation(fields: [organizationId], references: [id])
  organizationId    String?
  
  // QC related
  reviewsAssigned   QCReview[]    @relation("ReviewerRelation")
  supervisorReviews QCReview[]    @relation("SupervisorRelation")
  changeLogs        ChangeLog[]
  auditLogs         AuditLog[]
  
  @@index([email])
  @@index([role])
}

// Organization model
model Organization {
  id          String   @id @default(cuid())
  name        String
  domain      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  cases       Case[]
  
  @@index([name])
}

// Case model with all 48 fields
model Case {
  id                    String   @id @default(cuid())
  caseId                String   @unique
  status                QCStatus @default(PENDING)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Organization
  organization          Organization @relation(fields: [organizationId], references: [id])
  organizationId        String
  
  // Core fields (all 48 as per schema)
  patientName           String?
  dob                   String?
  gender                String?
  surgeryDate           String?
  surgeryType           String?
  medicalRecordNumber   String?
  surgeonName           String?
  hospitalName          String?
  preOpDiagnosis        String?
  postOpDiagnosis       String?
  complications         String?
  complicationDetails   String?
  readmission           String?
  readmissionReason     String?
  followUpDate          String?
  followUpNotes         String?
  patientHistory        String?
  comorbidities         String?
  medications           String?
  allergies             String?
  labResults            String?
  imagingResults        String?
  consultNotes          String?
  anesthesiaType        String?
  anesthesiaNotes       String?
  operativeNotes        String?
  pathologyResults      String?
  dischargeDate         String?
  dischargeSummary      String?
  postOpInstructions    String?
  physicalTherapy       String?
  occupationalTherapy   String?
  speechTherapy         String?
  dietaryRestrictions   String?
  weightBearing         String?
  activityRestrictions  String?
  woundCare             String?
  drainCare             String?
  medicationChanges     String?
  followUpAppointments  String?
  patientEducation      String?
  homeHealthNeeds       String?
  dmeNeeds              String?
  insuranceAuth         String?
  financialCounseling   String?
  socialWork            String?
  caseManagement        String?
  qualityMetrics        String?
  
  // Relations
  modelOutputs          ModelOutput[]
  qcReviews             QCReview[]
  changeLogs            ChangeLog[]
  citations             Citation[]
  
  @@index([caseId])
  @@index([status])
  @@index([organizationId])
}

// Model outputs (Gemini, GPT, etc.)
model ModelOutput {
  id              String   @id @default(cuid())
  modelName       String   // e.g., "Gemini", "GPT-4"
  modelVersion    String   // e.g., "1.5", "2024-01"
  createdAt       DateTime @default(now())
  
  // Case relation
  case            Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId          String
  
  // All 48 fields as JSON for flexibility
  outputData      Json     // Contains all 48 fields with their values
  confidence      Json?    // Confidence scores for each field
  
  // Relations
  qcReviews       QCReview[]
  
  @@index([caseId])
  @@index([modelName])
}

// QC Review workflow
model QCReview {
  id                String    @id @default(cuid())
  status            QCStatus  @default(IN_REVIEW)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Case and model outputs
  case              Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId            String
  
  modelOutput1      ModelOutput @relation(fields: [modelOutput1Id], references: [id])
  modelOutput1Id    String
  
  modelOutput2      ModelOutput? @relation(fields: [modelOutput2Id], references: [id])
  modelOutput2Id    String?
  
  // Reviewer and supervisor
  reviewer          User      @relation("ReviewerRelation", fields: [reviewerId], references: [id])
  reviewerId        String
  
  supervisor        User?     @relation("SupervisorRelation", fields: [supervisorId], references: [id])
  supervisorId      String?
  
  // Review data
  reviewerEdits     Json?     // Edited version of output1
  reviewerNotes     String?
  supervisorNotes   String?
  
  // Timestamps
  reviewStartedAt   DateTime?
  reviewCompletedAt DateTime?
  approvedAt        DateTime?
  rejectedAt        DateTime?
  
  // Relations
  changeLogs        ChangeLog[]
  
  @@index([caseId])
  @@index([reviewerId])
  @@index([status])
}

// Change log for tracking field-level changes
model ChangeLog {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  
  // User who made the change
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  
  // Related entities
  case            Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId          String
  
  qcReview        QCReview? @relation(fields: [qcReviewId], references: [id], onDelete: Cascade)
  qcReviewId      String?
  
  // Change details
  fieldName       String    // Which field was changed
  previousValue   String?   // Before value
  newValue        String?   // After value
  annotation      String?   // User's annotation/reason for change
  
  @@index([caseId])
  @@index([qcReviewId])
  @@index([userId])
  @@index([fieldName])
}

// Citation tracking for each field
model Citation {
  id              String   @id @default(cuid())
  
  // Case relation
  case            Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId          String
  
  // Field and citation details
  fieldName       String
  documentName    String
  pageNumber      String?
  quote           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([caseId])
  @@index([fieldName])
}

// Audit log for all system actions
model AuditLog {
  id          String   @id @default(cuid())
  action      String   // e.g., "USER_LOGIN", "CASE_APPROVED", "REVIEWER_ASSIGNED"
  entityType  String   // e.g., "User", "Case", "QCReview"
  entityId    String   // ID of the affected entity
  details     Json?    // Additional action details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // User who performed the action
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
}